/** @file
*  Debug Port Table (DBG2)
*
*  Copyright (c) 2021, Jared McNeill <jmcneill@invisible.ca>
*  Copyright (c) 2020 Linaro Ltd. All rights reserved.
*
*  SPDX-License-Identifier: BSD-2-Clause-Patent
*
**/
#include <IndustryStandard/Acpi.h>
#include <IndustryStandard/DebugPort2Table.h>
#include <Library/AcpiLib.h>
#include <Library/PcdLib.h>

#include "AcpiTables.h"

#pragma pack(1)

#define UART_STR { '\\', '_', 'S', 'B', '.', 'U', 'A', 'R', '2', 0x00 }

typedef struct {
  EFI_ACPI_DBG2_DEBUG_DEVICE_INFORMATION_STRUCT Dbg2Device;
  EFI_ACPI_6_3_GENERIC_ADDRESS_STRUCTURE        BaseAddressRegister;
  UINT32                                        AddressSize;
  UINT8                                         NameSpaceString[10];
} DBG2_DEBUG_DEVICE_INFORMATION;

typedef struct {
  EFI_ACPI_DEBUG_PORT_2_DESCRIPTION_TABLE       Description;
  DBG2_DEBUG_DEVICE_INFORMATION                 Dbg2DeviceInfo;
} DBG2_TABLE;


STATIC DBG2_TABLE Dbg2 = {
  {
    ACPI_HEADER (
      EFI_ACPI_6_3_DEBUG_PORT_2_TABLE_SIGNATURE,
      DBG2_TABLE,
      EFI_ACPI_DBG2_DEBUG_DEVICE_INFORMATION_STRUCT_REVISION
    ),
    OFFSET_OF (DBG2_TABLE, Dbg2DeviceInfo),
    1                                      /* NumberOfDebugPorts */
  },
  {
    {
      EFI_ACPI_DBG2_DEBUG_DEVICE_INFORMATION_STRUCT_REVISION,
      sizeof (DBG2_DEBUG_DEVICE_INFORMATION),
      1,                                   /* NumberofGenericAddressRegisters */
      10,                                  /* NameSpaceStringLength */
      OFFSET_OF (DBG2_DEBUG_DEVICE_INFORMATION, NameSpaceString),
      0,                                   /* OemDataLength */
      0,                                   /* OemDataOffset */
      EFI_ACPI_DBG2_PORT_TYPE_SERIAL,
      EFI_ACPI_DBG2_PORT_SUBTYPE_SERIAL_16550_WITH_GAS,
      {EFI_ACPI_RESERVED_BYTE, EFI_ACPI_RESERVED_BYTE},
      OFFSET_OF (DBG2_DEBUG_DEVICE_INFORMATION, BaseAddressRegister),
      OFFSET_OF (DBG2_DEBUG_DEVICE_INFORMATION, AddressSize)
    },
    ARM_GAS32 (FixedPcdGet64(PcdSerialRegisterBase)),  /* BaseAddressRegister */
    0x1000,                                            /* AddressSize */
    UART_STR,                                          /* NameSpaceString */
  }
};

#pragma pack()

// Reference the table being generated to prevent the optimizer from removing
// the data structure from the executable
VOID* CONST ReferenceAcpiTable = &Dbg2;



/** @file
*
*  Trusted Platform Module 2(TPM2)
*
**/

#include <IndustryStandard/Acpi.h>
#include <IndustryStandard/Acpi62.h>
#include "AcpiTables.h"

#pragma pack(1)

#define EFI_ACPI_ARM_OEM_ID           'M','S','F','T',' ',' '   // OEMID 6 bytes long
#define EFI_ACPI_ARM_OEM_TABLE_ID     SIGNATURE_64('f','T','P','M',' ',' ',' ',' ') // OEM table id 8 bytes long
#define EFI_ACPI_ARM_OEM_REVISION     0x20141014
#define EFI_ACPI_ARM_CREATOR_ID       SIGNATURE_32('D','M',' ',' ')
#define EFI_ACPI_ARM_CREATOR_REVISION 0x00000001

#define ARM_ACPI_HEADER(Signature, Type, Revision) {             \
    Signature,                      /* UINT32  Signature */       \
    sizeof (Type),                  /* UINT32  Length */          \
    Revision,                       /* UINT8   Revision */        \
    0,                              /* UINT8   Checksum */        \
    { EFI_ACPI_ARM_OEM_ID },        /* UINT8   OemId[6] */        \
    EFI_ACPI_ARM_OEM_TABLE_ID,      /* UINT64  OemTableId */      \
    EFI_ACPI_ARM_OEM_REVISION,      /* UINT32  OemRevision */     \
    EFI_ACPI_ARM_CREATOR_ID,        /* UINT32  CreatorId */       \
    EFI_ACPI_ARM_CREATOR_REVISION   /* UINT32  CreatorRevision */ \
  }
#pragma pack()
  
char TPM2SoftwareTpm[68] = {
    0x54, 0x50, 0x4D, 0x32, 0x44, 0x00, 0x00, 0x00, 0x03, 0xB0, 0x4D, 0x53, 0x46, 0x54, 0x20, 0x20,
    0x66, 0x54, 0x50, 0x4D, 0x20, 0x20, 0x20, 0x20, 0x01, 0x00, 0x00, 0x00, 0x44, 0x4D, 0x20, 0x20,
    0x14, 0x10, 0x14, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x45, 0x54, 0x41, 0x4C, 0x55, 0x4D, 0x49, 0x53, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

void * ReferenceAcpiTable(void) {
    return (void *) &TPM2SoftwareTpm;
}
